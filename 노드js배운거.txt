10:26 AM 12/23/2021
route라고하는게 post나 get이런거 인거같다.
schema.post('endpoint', (req,res))이런거.
로그인 기능 1. 이메일이 db에있는지 확인 2. 비밀번호가 일치하는지 확인 3. 일치한다면 토큰생성

1. modelName.findOne기능사용  {찾을거: req.body.찾을거}, (err,userInfo)
	userInfo가 db에 없다면 return res.json({  loginSuccess:false, message:"해당유저없음"})
2.있다면 비밀번호 대조
	*method를 만드는법 userSchema.method.methodName = function( a,cb ){ }
입력된 비번을 암호화해서 암호화된 비번과 비교
	bcrypt.compare( a,this.password, function(err,isMatch){
		//다르다면 if(err) return cb(err),
		//같다면 cb(null, isMatch)
		})
3. 저기서 다르면 isMatch를 return하지않았기때문에 값이없을것이다. 
	if(!isMatch) return res.json({loginSuccess:false})
	//일치한다면 토큰생성하기
	User model에서 function을 만들고 index에서 사용하는 모습을보이고있따.
	jsonwebtoken library가 필요하다. npm install jsonwebtoken --save

토큰을 만든것을 쿠키에 저장할수있따. 다른곳도가능 localdevice든 머든. 근데여기선 쿠키다.
또하나 쿠키에저장할떄 변환해줄 cookie-parser 다운 필요 . npm install cookie-parser

보니까 뭐하나 install하면 app.use(사용한거())이렇게 해줘야하나봄.(index에서는그러네. model에선 안함)

auth기능: 어떤 페이지는 로그인된사람만 이용할수있거나 어떤 사이트는 모두가이용할 수 있게하는기능. authentication이라고한다.
서버에 decode된 userid에 맞는 토큰이있으면 true. 아니면 false!
sever에서 토큰을 가져와 decode를 한다.
1. auth 만들기.
middleware이라는 폴더 아래 auth.js를 만든다.
*팁 js안에있는게 다른곳에도 쓰이고싶다면 let variableName한뒤
module.exports = {variableName}
그걸 다른데서쓸떈 const {a} = require('./그게있는폴더/jsName')

auth는 middleware인데 이거 끝나고는 next()해줘야 다음으로 넘어갈 수 있음.
let token = req.cookies.x_auth에서 x_auth는 토큰생성할때 res.cookie("x_auth", user.token)이랬기때문임.

몽고디비는 .. nodemonStart로 해도 변화를 못읽는다.. 서버를 다시켜야 돌아가넹..
보통 어지간하면 저사람이 하는데로 하자. 거의 내가틀림ㅋㅋ

로그아웃은
토큰을 지워버리면 로그인이 풀린다고한다.
실화임. 대신에 이거 postman으로 실험할때는 request새로만들어주면서해야됌!

request -> body ->raw ->json. 로그아웃은 아무것도입력한하고 send만해도됨!

리엑트.js를 배움으로써이제 client요소들도 만들수있겠다.
저 위에 하던 node.js는 backend stuff고 react.js는 front end stuff.
npx create-react-app .  꼭 쳐줘야댐

npm: 마지막에 -g를 붙이면 global하게 받고 없으면 local로 받아짐.  global은 프로젝트밖의 컴퓨터에 다운받겠따는거임;;

npx로 npm -g로 굳이안받고 node registry에 있는걸 그냥 가져와서 사용할 수 있음/ 최신화/용량절감의 효과가 있다.


11:38 AM 12/22/2021
몽고db에서는 browse collection으로 저장된 db를 볼 수 있다.
그러면 비밀번호도 입력된 그대로 저장되는데 그거를 암호화하기위해 bcrypt를 쓴다.
npm install bcrypt --save로 설치
register route로 가서 user.save하기전에 비밀번호를 암호화할 필요가 있음. 몽구스에 그런기능이있다.
User.js (유저 모델이라함) userSchema에 접근한뒤,
 userSchema.pre('save', function(next){
	//여기서 비밀번호를 암호화하는 과정을 거침
 next()})해주면 유저모델에 유저정보를 저장하기전에 function을 한다는소리임. 
salt를 사용해서 비밀번호를 암호화해야함. saltRounds는 salt가 몇글자인지..
그래서 saltRounds = 10 해놓고 그 걸로 salt를 만듬. 
	//비번이 바뀔때만 암호화하고 아이디나 이메일바꾸는건 암호화하지않아도됨.	
	if(user.isModified('password'){

	bcrypt.genSalt(SaltRounds, function(err,salt){
		if(err) return next(err)
				//hash는 암호화된 비번
		bcrypt.hash(user.password ,salt,function(err, hash){
			if(err) return next(err)
			//암호화된 비번생성성공
			user.password = hash
			next()
	
			} )

		}
	}

1. require bcrypt 
2. saltround 생성
3. userSchema.pre('대상function', function(next){
	3-1 암호화할대상이 수정되었을경우에만 하도록
	if(user.isModified('암호화할대상'){
	대상function하기전에할 내용
	bcrypt.genSalt(saltround, function(err, salt){
		4.암호화
		bcrypt.hash(user.암호화할대상, salt, function(err,hash){
			user.암호화할대상 = hash
			next
	}
	

2:32 PM 12/21/2021
몽고db 가입후 free로 cluster 생성. 한국은 공짜서버가없으니 인도네이시아걸로;;
그리고 url 복사후 index.js에 붙여야댐
mongoose 다운받을라면 npm install mongoose --save해야함 그래서 했음.
이거하면 package.json에 몽구스가 추가되어있음.

*몽구스연결하기
index.js에서 const mongoose = require('mongoose')
mongoose.connect('<password>라고 적힌곳에 비밀번호를 적어주기!! 괄호까지지워서 id:password이런 폼으로 적어줘야함아까그 url',{useNewUrlParser: true, useUnifiedTopology: true, useCreateIndex: true, useFindAndModify:false}).then(()=>console.log('연결됨').catch(err =>console.log(err))
			연결완료		에러가있다면 잡아주기

몽구스 id: Moungsung pw:msung1

{useNewUrlParser: true, useUnifiedTopology: true, useCreateIndex: true, useFindAndModify: false }
이거는 검색결과 더이상 지원하지않고 기본적으로 이렇게 세팅되었다고 상정한데.
그래서 이거 붙이면 오류남.

앱이 먼저 실행되고 서버에 접속됨.

모델은 class같은거고 스키마는 거안에있는 값같은거인듯
const schemaName = mongoose.Schema({
const variableName: {
	type: String, 
	maxlength: 50,
	trim: true, //String에서 스페이스 지워짐
	unique:1 //한가지 값만 존재할 수 있다. 한 db에
},
anotherVariableName:{ //유저의 유형을 이런식으로 관리할 수 있다. 1이면뭐 2면뭐..
	type:Number,
	default:0 //기본값으로는 0이다 정의되지않으면.
},
image: String, //그냥 이렇게 해도된다.
token: {             
	type:String //유효성관리한다고함.. 뭘까
},
tokenExp:{
	type:Number //토큰의 유효기간..
}
})

const model = mongoose.model('jsName', schemaName)

//모델을 다른 파일에서 쓸 수 있게
module.experts = {jsName}

git init으로 git공간을 만들어주자. 그 후 add가능
git add . 한칸띄고 쩜을 찍는게 포인트
git에 올릴때, 몽고나 express는 안올려도된다. 그래서 gitignore이라는 파일을 만들어 거기서 올리지안아도될 파일을 저격한다. 만약 이거하기전에 git에 올렸다면, git rm --cached 지울거 -r 로 지워주자.

이거없이 git status해야 깔끔하다.
그후 git commit -m "아무 메세지를 입력하세용"까지해야 저장소에 올라감.

여기까지는 git을 이용해 local repository에 올린거임 그걸 github에 올릴려면
일단 SSH(security shell)이 있어야함.

그럼 git bash를 켜고 코드를 쳐주자. 그리고 ssh background도 시작해주자.
이러고 ls -s ~/.ssh해보면 id_rsa랑 id_rsa.pub이 있는데, pubblic이고 안붙은건 private임
이거를 또 ssh-agent에 추가해줘야한다. ssh-add ~/.ssh/id_rsa 해주면됨.
그리고 pub인거를 github에 등록해줘야함. clip < ~/.ssh/id_rsa.pub해줌
이러면 이걸 복사해주는데 github설정에 ssh에 드가서 붙여넣기해주면됨.

다했으면 github에서 new reposityory만듦.
그리고 우리 저번에 init했으니까 push만해주면됨.
2번째 옵션에 3줄짜리코드 있을거야 그거복사.
git remote add origin https://github.com/msunglim/LearnNodeAndReactJS.git
git branch -M main
git push -u origin main
이러면 local이랑 github remote랑 연결이됨. 무슨말이냐면 로컬에있는 파일들이 깃헙에 올라간다는거임.

클라이언트에서 서버로 회원가입기능을 만들어보자.
중간에 body parser dependency가 필요하대. 클라와 서버간에 꼽사리끼는거지
npm install body-parser --save 해주자.

클라이언트가 만들어진게 없어서 postman이라는걸 다운받아야한단다..
아 클라가없다는게.. frontend로 만들어논게없자나.. html이없다.. javscript도안했으니까..

postman에서 그걸대신해줄수있음. 새로운 workspace만들고 새로운걸추가해
post로 우리는 하고있느니까 post고르고 body는 raw json해줘
그리고 json형식으로 값을 만들어준다음 send를 누르면 됨!
{"name":"Name",
"email":"email@gmail.com" 
} 이런식으로하고 send를 누르면 완료!

노드몬이라는게있는데 얘를 깔면 새로운변화를 주고 서버를 닫고 다시열필요없이
변화를 주면 자동으로인지해서 반영된다고한다.
npm install nodemon --save-dev로 설치 dev는 개발자모드라는거임. local에만 반영을하겠다. 배포한다음에는 손대지않겟다 이 말인듯.
대신 이런 기능할거면 새로운 script를 만들어줘서 이걸로 실행해줘야함.
scripts에 "nodeStart": "nodemon index.js" 이렇게해봐.

주소를 깃헙에올리면 다른놈들이 그거 쓸 수 있으니, 그거는 깃헙에 안올려야함
그래서 config폴더에 dev.js를 만들어 로컬에서 관리할 수 있게할 수 있음
그래서 index에서는 dev.js 의 variable을 이용하고 github에서는 gitignore덕분에 dev는 올리지않아도됨.

이걸 외부에서도 할 수 있는데 (production) heroku라는사이트에서 값을 저장하고 그걸 불러오게할 수도 있나봄.


12:53 PM 12/20/2021 index.js
Node js 폴더를 만들고 거기서 npm init을 해야됨 그럼 package가 생성됨.

index.js 가 벡엔드 시작점

visual studio에서 terminal은 콘솔이다. quick launch에서 (control q) console검색후
express를 받기위해선 npm install express --save를 치면된다.

run은 console에서 npm run scriptName

*console에서 값출력하고싶으면 '이 아니라 `로해야됨
ex) (port, () => console.log(`print ${port}`))

이걸 실행하면 서버가 열리나봐. 그래서 localhost:port숫자하면 드가짐. 
서버를 죽이는건 컨트롤 C
*웹에서 프린트하는건 그냥 js에서 document.write맹키로하는거는 res.send('이렇게프린트합니다') 

